2. Create consolidated item entries capturing purchases, sales, and returns through a view.
Implementation of views:
Allow admin to add a record to item entry table
Allow editing of open LPOs - update form pending.
Implement approvals for LPO.
   - One can cancel approval and edit while open.
   when pending approval allow cancellation of users request then set to open(status)
 reject and display comments and force admin to comment, show LPO status to Rejected and show the reasons for rejection on the page.
Allow admin to open invoice with reasons. Check how updating open invoice is working.
Details to have sections with clickable section heads to reveal contents
Testing
2. In sales invoice line: ensure to list only entries for the selected item
3. In sales memo automatically pick customer from invoice selected and fill item, batch, unit price from selected sales line and 
   removed item_entry field from sales memo table
4. For autofield fields look at how to show them dynamically on frontend
5. Use @cached_property
6. Use templates for enforcing permissions: look at UserPassesTestMixin mixin
7. ModelChoiceFilter - for filtering the lists
-----------------------------------------Retrieve Approval button value---------------------
if (request.method == "POST):
   if (request.POST.get('btn-1', False)):
       new_value_button = ValueButtons(value=request.POST.get(
'btn-1'))
       new_value_button.save()
----------------------------------------------------------------------
   Updating the receive order template 
                   <!-- {% else %}
                    {{field}}
                {% endif %} -->
               {{ field.value.vendor.vendor}}
-----------------------------------------------------------------