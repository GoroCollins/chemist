2. Create consolidated item entries capturing purchases, sales, and returns through a view.
Implementation of views:
Give edit option to only update quantity with reasons.(View and form) - allow admin to add a record to item entry table
Allow editing of open LPOs - update form pending.
Receiving approved LPOs - form is pending.
Implement approvals for LPO.
       - Once approved cannot be editted and one can cancel approval and edit while open.
         - added status field with three options {0:'Open', 1:'Pending Approval', 2: 'Approved', 3:'Cancelled'}
         - when pending approval allow cancellation of users request then set to open(status)
         - when pending approval admin can approve and set to approved(status) or reject set to open(status) and display comments and force admin to comment
Allow admin to open invoice with reasons. Check how updating open invoice is working.
Details to have sections with clickable section heads to reveal contents
Testing
2. In sales invoice line: ensure to list only entries for the selected item
3. In sales memo automatically pick customer from invoice selected and fill item, batch, unit price from selected sales line and 
   removed item_entry field from sales memo table
4. For autofield fields look at how to show them dynamically on frontend
5. Use @cached_property
6. Use templates for enforcing permissions: look at UserPassesTestMixin mixin
7. ModelChoiceFilter - for filtering the lists
-----------------------------------------Retrieve Approval button value---------------------
if (request.method == "POST):
   if (request.POST.get('btn-1', False)):
       new_value_button = ValueButtons(value=request.POST.get(
'btn-1'))
       new_value_button.save()
----------------------------------------------------------------------
   Updating the receive order template 
                   <!-- {% else %}
                    {{field}}
                {% endif %} -->
               {{ field.value.vendor.vendor}}
-----------------------------------------------------------------