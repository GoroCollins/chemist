from django.test import TestCase

# Create your tests here.

# Generated by CodiumAI
from collections import UserDict
from chemist.inventory.models import Profile
from django.contrib.auth.models import User

# import pytest

class TestProfile:

    # Tests that a Profile object can be created with all fields filled
    def test_create_profile_with_all_fields_filled(self):
        user = User.objects.create(username='testuser')
        profile = Profile.objects.create(user=user, full_name='John Doe', designation='Engineer', mobile_number='1234567890', profile_image='profile.png', profile_summary='Lorem ipsum', city='New York', state='NY', country='USA')
    
        assert profile.full_name == 'John Doe'
        assert profile.designation == 'Engineer'
        assert profile.mobile_number == '1234567890'
        assert profile.profile_image == 'profile.png'
        assert profile.profile_summary == 'Lorem ipsum'
        assert profile.city == 'New York'
        assert profile.state == 'NY'
        assert profile.country == 'USA'

    # Tests that a Profile object can be created with only the required fields filled
    def test_create_profile_with_required_fields_filled(self):
        user = User.objects.create(username='testuser')
        profile = Profile.objects.create(user=user, full_name='John Doe', designation='Engineer')
    
        assert profile.full_name == 'John Doe'
        assert profile.designation == 'Engineer'
        assert profile.mobile_number is None
        assert profile.profile_image == 'profile.png'
        assert profile.profile_summary is None
        assert profile.city is None
        assert profile.state is None
        assert profile.country is None

    # Tests that a Profile object can be updated with all fields filled
    def test_update_profile_with_all_fields_filled(self):
        user = User.objects.create(username='testuser')
        profile = Profile.objects.create(user=user, full_name='John Doe', designation='Engineer')
    
        profile.full_name = 'Jane Smith'
        profile.designation = 'Manager'
        profile.mobile_number = '9876543210'
        profile.profile_image = 'new_profile.png'
        profile.profile_summary = 'Lorem ipsum dolor sit amet'
        profile.city = 'Los Angeles'
        profile.state = 'CA'
        profile.country = 'USA'
        profile.save()
    
        assert profile.full_name == 'Jane Smith'
        assert profile.designation == 'Manager'
        assert profile.mobile_number == '9876543210'
        assert profile.profile_image == 'new_profile.png'
        assert profile.profile_summary == 'Lorem ipsum dolor sit amet'
        assert profile.city == 'Los Angeles'
        assert profile.state == 'CA'
        assert profile.country == 'USA'

    # Tests that a Profile object can be updated with only the required fields filled
    def test_update_profile_with_required_fields_filled(self):
        user = User.objects.create(username='testuser')
        profile = Profile.objects.create(user=user, full_name='John Doe', designation='Engineer')
    
        profile.full_name = 'Jane Smith'
        profile.designation = 'Manager'
        profile.save()
    
        assert profile.full_name == 'Jane Smith'
        assert profile.designation == 'Manager'
        assert profile.mobile_number is None
        assert profile.profile_image == 'profile.png'
        assert profile.profile_summary is None
        assert profile.city is None
        assert profile.state is None
        assert profile.country is None

    # Tests that a Profile object can be deleted
    def test_delete_profile(self):
        user = User.objects.create(username='testuser')
        profile = Profile.objects.create(user=user, full_name='John Doe', designation='Engineer')
    
        profile.delete()
    
        assert Profile.objects.filter(user=user).exists() is False

    # Tests that a Profile object cannot be created with null values for all fields
    def test_create_profile_with_null_values_for_all_fields(self):
        user = User.objects.create(username='testuser')
    
        with pytest.raises(Exception):
            Profile.objects.create(user=user, full_name=None, designation=None, mobile_number=None, profile_image=None, profile_summary=None, city=None, state=None, country=None)